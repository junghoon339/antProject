<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.messageMapper">
	<resultMap type="messageDTO" id="messageDTOMap">
		<id column="message_no" property="messageNo"/>
		<result column="user_no_message_sender" property="userNoMessageSender"/>
		<result column="user_no_message_receiver" property="userNoMessagereceiver"/>
		<result column="message_content" property="messageContent"/>
		<result column="message_sendtime" property="messageSendTime"/>
		<result column="message_receivetime" property="messageReceiveTime"/>
		<result column="message_state" property="messageState"/>
		<association property="userDTO" javaType="userDTO">
			<id column="user_no" property="userNo"/>
			<result column="user_name" property="userName"/>
			<result column="user_id" property="userId"/>
		</association>
	</resultMap>

	<select id="receiveMessageSelectAll" parameterType="map" resultMap="messageDTOMap">
	select * from (select rownum as rnum,b.* from(select m.*, au.user_name,au.user_id 
    from message m join ant_user au on m.user_no_message_sender=au.user_no 
    where USER_NO_MESSAGE_RECEIVER=#{userNoMessageSender} and message_state not in (1) order by m.message_sendtime desc)b)c where c.rnum>=#{startRow} and c.rnum&lt;=#{endRow}	
    </select>
	
	<select id="sendMessageSelectAll" parameterType="map" resultMap="messageDTOMap">
	select * from (select rownum as rnum,b.* from(select m.*, au.user_name,au.user_id 
    from message m join ant_user au on m.user_no_message_receiver=au.user_no 
    where USER_NO_MESSAGE_SENDER=#{userNoMessagereceiver} and message_state not in (2) order by m.message_sendtime desc)b)c where c.rnum>=#{startRow} and c.rnum&lt;=#{endRow}	
    </select>
    
    <select id="countReveiveMessage" parameterType="int" resultType="int">
    	select count(message_no) from message where USER_NO_MESSAGE_RECEIVER=#{_paremeter} and message_state not in (1)
    </select>
    
    <select id="countSendMessage" parameterType="int" resultType="int">
    	select count(message_no) from message where USER_NO_MESSAGE_SENDER=#{_paremeter} and message_state not in (2)
    </select>
    <!-- 검색할 때 -->
    <select id="receiveMessageSelectAllByName" parameterType="map" resultMap="messageDTOMap">
    select * from (select rownum as rnum,b.* from(select m.*, au.user_name,au.user_id 
    from message m join ant_user au on m.user_no_message_sender=au.user_no 
    where USER_NO_MESSAGE_RECEIVER=#{userNoMessageSender} and au.user_name like '%'||#{searchText}||'%' order by m.message_sendtime desc)b)c where c.rnum>=#{startRow} and c.rnum&lt;=#{endRow}
    </select>
    
    <select id="receiveMessageSelectAllByContent" parameterType="map" resultMap="messageDTOMap">
     select * from (select rownum as rnum,b.* from(select m.*, au.user_name,au.user_id 
    from message m join ant_user au on m.user_no_message_sender=au.user_no 
    where USER_NO_MESSAGE_RECEIVER=#{userNoMessageSender} and m.message_content like '%'||#{searchText}||'%' order by m.message_sendtime desc)b)c where c.rnum>=#{startRow} and c.rnum&lt;=#{endRow}   
    </select>
    
    <select id="countReveiveMessageByName" parameterType="map" resultType="int">
    select count(message_no) from message m join ant_user au on m.user_no_message_sender=au.user_no where m.USER_NO_MESSAGE_RECEIVER=#{userNo} and au.user_name like '%'||#{searchText}||'%'
    </select>
    
    <select id="countReveiveMessageByContent" parameterType="map" resultType="int">
    select count(message_no) from message m join ant_user au on m.user_no_message_sender=au.user_no where m.USER_NO_MESSAGE_RECEIVER=#{userNo} and m.message_content like '%'||#{searchText}||'%'
    </select>
    
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    
    <select id="sendMessageSelectAllByName" parameterType="map" resultMap="messageDTOMap">
    select * from (select rownum as rnum,b.* from(select m.*, au.user_name,au.user_id 
    from message m join ant_user au on m.user_no_message_receiver=au.user_no 
    where USER_NO_MESSAGE_SENDER=#{userNoMessagereceiver} and au.user_name like '%'||#{searchText}||'%' order by m.message_sendtime desc)b)c where c.rnum>=#{startRow} and c.rnum&lt;=#{endRow}	
    </select>
    
    <select id="sendMessageSelectAllByContent" parameterType="map" resultMap="messageDTOMap">
    select * from (select rownum as rnum,b.* from(select m.*, au.user_name,au.user_id 
    from message m join ant_user au on m.user_no_message_receiver=au.user_no 
    where USER_NO_MESSAGE_SENDER=#{userNoMessagereceiver} and m.message_content like '%'||#{searchText}||'%' order by m.message_sendtime desc)b)c where c.rnum>=#{startRow} and c.rnum&lt;=#{endRow}	
    </select>
    
    <select id="countSendMessageByName" parameterType="map" resultType="int">
    select count(message_no) from message m join ant_user au on m.user_no_message_sender=au.user_no where m.USER_NO_MESSAGE_SENDER=#{userNo} and au.user_name like '%'||#{searchText}||'%'
    </select>
    
    <select id="countSendMessageByContent" parameterType="map" resultType="int">
    select count(message_no) from message m join ant_user au on m.user_no_message_sender=au.user_no where m.USER_NO_MESSAGE_SENDER=#{userNo} and m.message_content like '%'||#{searchText}||'%'
    </select>
	<!-- 검색할 때 -->
	<insert id="messageInsert" parameterType="messageDTO">
		insert into message values(seq_message_no.nextval,(select user_no from ant_user where user_id=#{messageReceiver}),#{messageContent},sysdate,null,0,#{userNoMessageSender})
	</insert>
	
	<select id="messageDetail" parameterType="int" resultMap="messageDTOMap">
		select m.*, au.user_name,au.user_id from message m join ant_user au on m.user_no_message_sender=au.user_no where message_no=#{_parameter}
	</select>
	
	<select id="receiveTimeUpdate" parameterType="int">
		update message set message_receivetime=sysdate where message_no=#{_parameter}
	</select>
	
	<delete id="messageDelete" parameterType="int">
		delete from message where message_no=#{_parameter}
	</delete>
	
	<update id="messageDeleteUpdate" parameterType="map">
		update message set message_state=#{messageState} where message_no=#{messageNo}
	</update>
	
	<select id="selectMessageState" parameterType="int" resultType="int">
		select message_state from message where message_no=#{_parameter}
	</select>
</mapper>